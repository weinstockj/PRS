var documenterSearchIndex = {"docs":
[{"location":"#PRSFNN","page":"Home","title":"PRSFNN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Steps to load this module from the root directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run julia --color=yes --project=. (this code expects 1.9.0)\nRun using Revise\nRun using PRSFNN # takes 32 seconds on my machine","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now the functions have been sourced. ","category":"page"},{"location":"#Simulating-GWAS-data","page":"Home","title":"Simulating GWAS data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Then first simulate GWAS summary statistic data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"raw = simulate_raw()\nss = estimate_sufficient_statistics(raw[1], raw[3])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out the true beta distribution with: using Plots; histogram(raw[2]) ","category":"page"},{"location":"#Train-PRS","page":"Home","title":"Train PRS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"test_new = train_until_convergence(ss[1], ss[2], ss[4], ss[5], raw[6], raw[2], raw[8])","category":"page"},{"location":"#Unit-testing","page":"Home","title":"Unit testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run unit tests with includet(\"test/runtests.jl\")","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PRSFNN.rss \nPRSFNN.elbo\nPRSFNN.joint_log_prob\nPRSFNN.train_until_convergence","category":"page"},{"location":"#PRSFNN.rss","page":"Home","title":"PRSFNN.rss","text":"`rss(β, coef, SE, R)`\nCalculate the summary statistic RSS likelihood:\n\nrss(\n    [0.0011, .0052, 0.0013],\n    [-0.019, 0.013, -.0199],\n    [.0098, .0098, .0102],\n    [1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0]\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.elbo","page":"Home","title":"PRSFNN.elbo","text":"elbo(z, q_μ, log_q_var, coef, SE, R, σ2_β, p_causal)\n\nelbo(\n    rand(Normal(0, 1), 3),\n    [0.01, -0.003, 0.0018],\n    [-9.234, -9.24, -9.24],\n    [0.023, -0.0009, -.0018],\n    [.0094, .00988, .0102],\n    [1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0],\n    0.01,\n    0.10\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.joint_log_prob","page":"Home","title":"PRSFNN.joint_log_prob","text":"joint_log_prob(β, coef, SE, R, σ2_β, p_causal)\n\nCompute the joint log probability of the model\n\n\njoint_log_prob(\n    [0.0011, .0052, 0.0013],\n    [-0.019, 0.013, -.0199],\n    [.0098, .0098, .0102],\n    [1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0],\n    0.01,\n    0.10\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.train_until_convergence","page":"Home","title":"PRSFNN.train_until_convergence","text":"`train_until_convergence(coef, SE, R, D, G, true_betas, function_choices; max_iter = 20, threshold = 0.1, N = 10_000)`\n\n\n\n\n\n","category":"function"}]
}
