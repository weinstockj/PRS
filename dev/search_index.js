var documenterSearchIndex = {"docs":
[{"location":"#PRSFNN","page":"Home","title":"PRSFNN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Steps to load this module from the root directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run julia --color=yes --project=. (this code expects 1.9.0)\nRun using Revise\nRun using PRSFNN # takes 32 seconds on my machine","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now the functions have been sourced. ","category":"page"},{"location":"#Simulating-GWAS-data","page":"Home","title":"Simulating GWAS data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Then first simulate GWAS summary statistic data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"raw = simulate_raw()\nss = estimate_sufficient_statistics(raw[1], raw[3])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out the true beta distribution with: using Plots; histogram(raw[2]) ","category":"page"},{"location":"#Train-PRS","page":"Home","title":"Train PRS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"test_new = train_until_convergence(ss[1], ss[2], ss[4], ss[5], raw[6])","category":"page"},{"location":"#Unit-testing","page":"Home","title":"Unit testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run unit tests with includet(\"test/runtests.jl\")","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PRSFNN.main\nPRSFNN.rss \nPRSFNN.elbo\nPRSFNN.joint_log_prob\nPRSFNN.train_until_convergence\nPRSFNN.fit_heritability_nn\nPRSFNN.log_prior\nPRSFNN.estimate_sufficient_statistics\nPRSFNN.compute_LD\nPRSFNN.comonicon_install\nPRSFNN.comonicon_install_path","category":"page"},{"location":"#PRSFNN.main","page":"Home","title":"PRSFNN.main","text":"PRSFNN\n\nThis function defines the command line interface for the PRSFNN package.\n\nArguments\n\nsummary_stats: A path to an appropriately formatted summary statistics file\nLD_reference: A path a plink .bed file with the LD reference panel\nannotations: A path to an appropriately formatted annotations file\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.rss","page":"Home","title":"PRSFNN.rss","text":"rss(β, coef, Σ, SRSinv, to; λ)\nCalculate the summary statistic RSS likelihood\n\nrss(\n    [0.0011, .0052, 0.0013],\n    [-0.019, 0.013, -.0199],\n    PDMat(Hermitian([1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0]) + 1e-8 * I),\n    [1.0 0.03 0.0163333; 0.031 1.0 -0.0288235; 0.0176939 -0.0208163 1.0],\n    TimerOutput()\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.elbo","page":"Home","title":"PRSFNN.elbo","text":"elbo(z, q_μ, log_q_var, coef, SE, R, σ2_β, p_causal)\n\nelbo(\n    rand(Normal(0, 1), 3),\n    [0.01, -0.003, 0.0018],\n    [-9.234, -9.24, -9.24],\n    [0.023, -0.0009, -.0018],\n    [.0094, .00988, .0102],\n    [1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0],\n    0.01,\n    0.10\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.joint_log_prob","page":"Home","title":"PRSFNN.joint_log_prob","text":"joint_log_prob(β, coef, SE, R, σ2_β, p_causal)\n\nCompute the joint log probability of the model\n\n\njoint_log_prob(\n    [0.0011, .0052, 0.0013],\n    [-0.019, 0.013, -.0199],\n    [.0098, .0098, .0102],\n    [1.0 .03 .017; .031 1.0 -0.03; .017 -0.02 1.0],\n    0.01,\n    0.10\n)\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.train_until_convergence","page":"Home","title":"PRSFNN.train_until_convergence","text":"`train_until_convergence(coef, SE, R, D, G; max_iter = 20, threshold = 0.1, N = 10_000)`\n\n# Arguments\n- `coef::Vector`: A length P vector of effect sizes\n- `SE::Vector`: A length P vector of standard errors\n- 'R::AbstractArray': A P x P correlation matrix\n- 'D::Vector': A length P vector of the sum of squared genotypes\n- 'G::AbstractArray': A P x K matrix of annotations\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.fit_heritability_nn","page":"Home","title":"PRSFNN.fit_heritability_nn","text":"fitheritabilitynn(model, qμ, qvar, q_alpha, G, i)\n\nFit the heritability neural network model.\n\n# Arguments\n- `model::Chain`: A neural network model\n- `q_μ::Vector`: A length P vector of posterior means\n- `q_var::Vector`: A length P vector of posterior variances\n- `q_α::Vector`: A length P vector of posterior probabilities of being causal\n- `G::AbstractArray`: A P x K matrix of annotations\n- `i::Integer`: An integer iterator\n\n    model = Chain(\n        Dense(20 => 5, relu; init = Flux.glorot_normal(gain = 0.0005)),\n        Dense(5 => 2)\n    )\n\n    G = rand(Normal(0, 1), 100, 20)\n    q_var = (G * rand(Normal(0, 0.10), 20)) .^ 2\n    q_α = 1.0 ./ (1.0 .+ exp.(-1.0 .* (-2.0 .+ q_var)))\n    trained_model = PRSFNN.fit_heritability_nn(\n        model, \n        q_var, \n        q_α, \n        G\n    )\n    yhat = transpose(trained_model(transpose(G)))\n    yhat[:, 1] .= exp.(yhat[:, 1])\n    yhat[:, 2] .= 1.0 ./ (1.0 .+ exp.(-yhat[:, 2]))\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.log_prior","page":"Home","title":"PRSFNN.log_prior","text":"log_prior(β, σ2_β, p_causal)\nCalculates the log density of β based on a spiek and slab prior\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.estimate_sufficient_statistics","page":"Home","title":"PRSFNN.estimate_sufficient_statistics","text":"estimate_sufficient_statistics(X, Y)\n\nEstimate the sufficient statistics for the model given genotypes and phenotype\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.compute_LD","page":"Home","title":"PRSFNN.compute_LD","text":"compute_LD(LD_reference::String)\n\nCompute the LD matrix from a reference genotype file\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.comonicon_install","page":"Home","title":"PRSFNN.comonicon_install","text":"comonicon_install(;kwargs...)\n\nInstall the CLI manually. This will use the default configuration in Comonicon.toml, if it exists. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"function"},{"location":"#PRSFNN.comonicon_install_path","page":"Home","title":"PRSFNN.comonicon_install_path","text":"comonicon_install_path(;[yes=false])\n\nInstall the PATH and FPATH to your shell configuration file. You can use comonicon_install_path(;yes=true) to skip interactive prompt. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"function"}]
}
